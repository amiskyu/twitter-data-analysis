{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-26T16:02:52.174397Z","iopub.execute_input":"2024-08-26T16:02:52.175329Z","iopub.status.idle":"2024-08-26T16:02:52.771288Z","shell.execute_reply.started":"2024-08-26T16:02:52.175277Z","shell.execute_reply":"2024-08-26T16:02:52.769794Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/twitter-dataset/108.csv\n/kaggle/input/twitter-dataset/18.csv\n/kaggle/input/twitter-dataset/92.csv\n/kaggle/input/twitter-dataset/20.csv\n/kaggle/input/twitter-dataset/42.csv\n/kaggle/input/twitter-dataset/90.csv\n/kaggle/input/twitter-dataset/71.csv\n/kaggle/input/twitter-dataset/55.csv\n/kaggle/input/twitter-dataset/74.csv\n/kaggle/input/twitter-dataset/1.csv\n/kaggle/input/twitter-dataset/33.csv\n/kaggle/input/twitter-dataset/24.csv\n/kaggle/input/twitter-dataset/78.csv\n/kaggle/input/twitter-dataset/75.csv\n/kaggle/input/twitter-dataset/11.csv\n/kaggle/input/twitter-dataset/59.csv\n/kaggle/input/twitter-dataset/56.csv\n/kaggle/input/twitter-dataset/30.csv\n/kaggle/input/twitter-dataset/17.csv\n/kaggle/input/twitter-dataset/93.csv\n/kaggle/input/twitter-dataset/36.csv\n/kaggle/input/twitter-dataset/77.csv\n/kaggle/input/twitter-dataset/16.csv\n/kaggle/input/twitter-dataset/51.csv\n/kaggle/input/twitter-dataset/68.csv\n/kaggle/input/twitter-dataset/119.csv\n/kaggle/input/twitter-dataset/3.csv\n/kaggle/input/twitter-dataset/133.csv\n/kaggle/input/twitter-dataset/38.csv\n/kaggle/input/twitter-dataset/31.csv\n/kaggle/input/twitter-dataset/114.csv\n/kaggle/input/twitter-dataset/19.csv\n/kaggle/input/twitter-dataset/73.csv\n/kaggle/input/twitter-dataset/5.csv\n/kaggle/input/twitter-dataset/35.csv\n/kaggle/input/twitter-dataset/115.csv\n/kaggle/input/twitter-dataset/2.csv\n/kaggle/input/twitter-dataset/41.csv\n/kaggle/input/twitter-dataset/45.csv\n/kaggle/input/twitter-dataset/131.csv\n/kaggle/input/twitter-dataset/26.csv\n/kaggle/input/twitter-dataset/28.csv\n/kaggle/input/twitter-dataset/13.csv\n/kaggle/input/twitter-dataset/43.csv\n/kaggle/input/twitter-dataset/112.csv\n/kaggle/input/twitter-dataset/23.csv\n/kaggle/input/twitter-dataset/52.csv\n/kaggle/input/twitter-dataset/14.csv\n/kaggle/input/twitter-dataset/137.csv\n/kaggle/input/twitter-dataset/57.csv\n/kaggle/input/twitter-dataset/4.csv\n/kaggle/input/twitter-dataset/22.csv\n/kaggle/input/twitter-dataset/128.csv\n/kaggle/input/twitter-dataset/96.csv\n/kaggle/input/twitter-dataset/67.csv\n/kaggle/input/twitter-dataset/80.csv\n/kaggle/input/twitter-dataset/40.csv\n/kaggle/input/twitter-dataset/109.csv\n/kaggle/input/twitter-dataset/65.csv\n/kaggle/input/twitter-dataset/44.csv\n/kaggle/input/twitter-dataset/86.csv\n/kaggle/input/twitter-dataset/87.csv\n/kaggle/input/twitter-dataset/94.csv\n/kaggle/input/twitter-dataset/85.csv\n/kaggle/input/twitter-dataset/8.csv\n/kaggle/input/twitter-dataset/58.csv\n/kaggle/input/twitter-dataset/12.csv\n/kaggle/input/twitter-dataset/61.csv\n/kaggle/input/twitter-dataset/50.csv\n/kaggle/input/twitter-dataset/39.csv\n/kaggle/input/twitter-dataset/118.csv\n/kaggle/input/twitter-dataset/62.csv\n/kaggle/input/twitter-dataset/89.csv\n/kaggle/input/twitter-dataset/88.csv\n/kaggle/input/twitter-dataset/100.csv\n/kaggle/input/twitter-dataset/79.csv\n/kaggle/input/twitter-dataset/129.csv\n/kaggle/input/twitter-dataset/122.csv\n/kaggle/input/twitter-dataset/82.csv\n/kaggle/input/twitter-dataset/107.csv\n/kaggle/input/twitter-dataset/9.csv\n/kaggle/input/twitter-dataset/136.csv\n/kaggle/input/twitter-dataset/54.csv\n/kaggle/input/twitter-dataset/66.csv\n/kaggle/input/twitter-dataset/97.csv\n/kaggle/input/twitter-dataset/49.csv\n/kaggle/input/twitter-dataset/135.csv\n/kaggle/input/twitter-dataset/98.csv\n/kaggle/input/twitter-dataset/7.csv\n/kaggle/input/twitter-dataset/91.csv\n/kaggle/input/twitter-dataset/110.csv\n/kaggle/input/twitter-dataset/132.csv\n/kaggle/input/twitter-dataset/76.csv\n/kaggle/input/twitter-dataset/125.csv\n/kaggle/input/twitter-dataset/72.csv\n/kaggle/input/twitter-dataset/47.csv\n/kaggle/input/twitter-dataset/15.csv\n/kaggle/input/twitter-dataset/120.csv\n/kaggle/input/twitter-dataset/130.csv\n/kaggle/input/twitter-dataset/37.csv\n/kaggle/input/twitter-dataset/105.csv\n/kaggle/input/twitter-dataset/81.csv\n/kaggle/input/twitter-dataset/126.csv\n/kaggle/input/twitter-dataset/113.csv\n/kaggle/input/twitter-dataset/106.csv\n/kaggle/input/twitter-dataset/102.csv\n/kaggle/input/twitter-dataset/64.csv\n/kaggle/input/twitter-dataset/6.csv\n/kaggle/input/twitter-dataset/101.csv\n/kaggle/input/twitter-dataset/10.csv\n/kaggle/input/twitter-dataset/111.csv\n/kaggle/input/twitter-dataset/25.csv\n/kaggle/input/twitter-dataset/104.csv\n/kaggle/input/twitter-dataset/70.csv\n/kaggle/input/twitter-dataset/29.csv\n/kaggle/input/twitter-dataset/134.csv\n/kaggle/input/twitter-dataset/117.csv\n/kaggle/input/twitter-dataset/124.csv\n/kaggle/input/twitter-dataset/99.csv\n/kaggle/input/twitter-dataset/21.csv\n/kaggle/input/twitter-dataset/127.csv\n/kaggle/input/twitter-dataset/69.csv\n/kaggle/input/twitter-dataset/60.csv\n/kaggle/input/twitter-dataset/32.csv\n/kaggle/input/twitter-dataset/84.csv\n/kaggle/input/twitter-dataset/34.csv\n/kaggle/input/twitter-dataset/27.csv\n/kaggle/input/twitter-dataset/121.csv\n/kaggle/input/twitter-dataset/48.csv\n/kaggle/input/twitter-dataset/63.csv\n/kaggle/input/twitter-dataset/95.csv\n/kaggle/input/twitter-dataset/53.csv\n/kaggle/input/twitter-dataset/46.csv\n/kaggle/input/twitter-dataset/103.csv\n/kaggle/input/twitter-dataset/116.csv\n/kaggle/input/twitter-dataset/123.csv\n/kaggle/input/twitter-dataset/83.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Understanding Public Sentiment and Communication Patterns in the Ukraine-Russia Conflict Through Twitter Data Analysis","metadata":{}},{"cell_type":"markdown","source":"## Description","metadata":{}},{"cell_type":"markdown","source":"# Imports","metadata":{}},{"cell_type":"code","source":"#Necessary Libraries\n\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport numpy as np\nimport seaborn as sns\nfrom scipy.stats import zscore\nimport networkx as nx\nfrom networkx.algorithms.community import greedy_modularity_communities\nimport re\nimport string\nfrom nltk.corpus import stopwords\nimport nltk\nimport emoji\nimport wordcloud\nfrom wordcloud import WordCloud\nimport transformers\nimport torch  # Required for using transformer models\nfrom transformers import pipeline\nimport prophet\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nimport xgboost\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom dateutil.parser import parse\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport community as community_louvain","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:02:52.773750Z","iopub.execute_input":"2024-08-26T16:02:52.775104Z","iopub.status.idle":"2024-08-26T16:03:22.999289Z","shell.execute_reply.started":"2024-08-26T16:02:52.775001Z","shell.execute_reply":"2024-08-26T16:03:22.997987Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Combining the data into one single dataframe and printing first 5 rows\n\n# Assuming all files are in the same directory\n\npath = '/kaggle/input/twitter-dataset/' \nfiles = [file for file in os.listdir(path) if file.endswith('.csv')]\n\n# Create an empty list to store DataFrames\ndataframes = []\n\n# Loop through the files and append to the list\nfor file in files:\n    full_path = os.path.join(path, file)  # Correctly form the full path\n    temp_df = pd.read_csv(path + file)\n    dataframes.append(temp_df)\n\n# Concatenate all DataFrames into one\ncombined_data = pd.concat(dataframes, ignore_index=True)\n\ncombined_data.head()\nprint(\"Combined Data Dimensions:\")\ncombined_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:03:23.001041Z","iopub.execute_input":"2024-08-26T16:03:23.001934Z","iopub.status.idle":"2024-08-26T16:07:19.759358Z","shell.execute_reply.started":"2024-08-26T16:03:23.001888Z","shell.execute_reply":"2024-08-26T16:07:19.757140Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/2424646528.py:14: DtypeWarning: Columns (15) have mixed types. Specify dtype option on import or set low_memory=False.\n  temp_df = pd.read_csv(path + file)\n","output_type":"stream"},{"name":"stdout","text":"Combined Data Dimensions:\n","output_type":"stream"},{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(8436879, 29)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Statistical EDA","metadata":{}},{"cell_type":"code","source":"combined_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:07:19.764942Z","iopub.execute_input":"2024-08-26T16:07:19.765502Z","iopub.status.idle":"2024-08-26T16:07:19.829017Z","shell.execute_reply.started":"2024-08-26T16:07:19.765454Z","shell.execute_reply":"2024-08-26T16:07:19.827790Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0              userid      username  \\\n0       56250  984429894829592576  pulsoguayaco   \n1       56251  819697490505138176   elpipila_mx   \n2       56252          1087417782  JeromeMellon   \n3       56253             6135622    dw_espanol   \n4       56254             9609632    australian   \n\n                                            acctdesc           location  \\\n0  🌐✈Blog de aviación, viajes y economía para via...               🇪🇨🇺🇸   \n1  Ciudadanos al frente de las noticias. Hecho po...   León, Guanajuato   \n2  Head of Policy Team @UN_OROLSI, @UNPeacekeepin...           New York   \n3  Desde Alemania para el mundo. Aquí y ahora. Se...    Berlin, Germany   \n4                          News from The Australian.  Sydney, Australia   \n\n   following  followers  totaltweets        usercreatedts  \\\n0         70        327        15425  2018-04-12 13:55:51   \n1        755       2902        30455  2017-01-13 00:08:05   \n2        321       1597          800  2013-01-13 22:48:46   \n3        162    1330687       164943  2007-05-18 11:40:24   \n4        555     811317       268162  2007-10-22 23:57:33   \n\n               tweetid  ... original_tweet_userid  original_tweet_username  \\\n0  1617311147555799040  ...                     0                      NaN   \n1  1617311150324027392  ...                     0                      NaN   \n2  1617311150382751747  ...                     0                      NaN   \n3  1617311151305400321  ...                     0                      NaN   \n4  1617311153969061888  ...                     0                      NaN   \n\n  in_reply_to_status_id in_reply_to_user_id in_reply_to_screen_name  \\\n0                     0                   0                     NaN   \n1                     0                   0                     NaN   \n2                     0                   0                     NaN   \n3                     0                   0                     NaN   \n4                     0                   0                     NaN   \n\n  is_quote_status  quoted_status_id  quoted_status_userid  \\\n0           False                 0                     0   \n1           False                 0                     0   \n2           False                 0                     0   \n3           False                 0                     0   \n4           False                 0                     0   \n\n   quoted_status_username                 extractedts  \n0                     NaN  2023-01-23 15:17:25.692200  \n1                     NaN  2023-01-23 13:17:16.410731  \n2                     NaN  2023-01-23 09:31:50.332216  \n3                     NaN  2023-01-23 13:17:16.396913  \n4                     NaN  2023-01-23 09:31:50.319420  \n\n[5 rows x 29 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>userid</th>\n      <th>username</th>\n      <th>acctdesc</th>\n      <th>location</th>\n      <th>following</th>\n      <th>followers</th>\n      <th>totaltweets</th>\n      <th>usercreatedts</th>\n      <th>tweetid</th>\n      <th>...</th>\n      <th>original_tweet_userid</th>\n      <th>original_tweet_username</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>in_reply_to_screen_name</th>\n      <th>is_quote_status</th>\n      <th>quoted_status_id</th>\n      <th>quoted_status_userid</th>\n      <th>quoted_status_username</th>\n      <th>extractedts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>56250</td>\n      <td>984429894829592576</td>\n      <td>pulsoguayaco</td>\n      <td>🌐✈Blog de aviación, viajes y economía para via...</td>\n      <td>🇪🇨🇺🇸</td>\n      <td>70</td>\n      <td>327</td>\n      <td>15425</td>\n      <td>2018-04-12 13:55:51</td>\n      <td>1617311147555799040</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2023-01-23 15:17:25.692200</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>56251</td>\n      <td>819697490505138176</td>\n      <td>elpipila_mx</td>\n      <td>Ciudadanos al frente de las noticias. Hecho po...</td>\n      <td>León, Guanajuato</td>\n      <td>755</td>\n      <td>2902</td>\n      <td>30455</td>\n      <td>2017-01-13 00:08:05</td>\n      <td>1617311150324027392</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2023-01-23 13:17:16.410731</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>56252</td>\n      <td>1087417782</td>\n      <td>JeromeMellon</td>\n      <td>Head of Policy Team @UN_OROLSI, @UNPeacekeepin...</td>\n      <td>New York</td>\n      <td>321</td>\n      <td>1597</td>\n      <td>800</td>\n      <td>2013-01-13 22:48:46</td>\n      <td>1617311150382751747</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2023-01-23 09:31:50.332216</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>56253</td>\n      <td>6135622</td>\n      <td>dw_espanol</td>\n      <td>Desde Alemania para el mundo. Aquí y ahora. Se...</td>\n      <td>Berlin, Germany</td>\n      <td>162</td>\n      <td>1330687</td>\n      <td>164943</td>\n      <td>2007-05-18 11:40:24</td>\n      <td>1617311151305400321</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2023-01-23 13:17:16.396913</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>56254</td>\n      <td>9609632</td>\n      <td>australian</td>\n      <td>News from The Australian.</td>\n      <td>Sydney, Australia</td>\n      <td>555</td>\n      <td>811317</td>\n      <td>268162</td>\n      <td>2007-10-22 23:57:33</td>\n      <td>1617311153969061888</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2023-01-23 09:31:50.319420</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"combined_data.drop(columns=['coordinates', 'Unnamed: 0'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:07:19.830856Z","iopub.execute_input":"2024-08-26T16:07:19.831398Z","iopub.status.idle":"2024-08-26T16:07:28.047718Z","shell.execute_reply.started":"2024-08-26T16:07:19.831338Z","shell.execute_reply":"2024-08-26T16:07:28.044250Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"combined_data.head()\ncombined_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:07:28.051839Z","iopub.execute_input":"2024-08-26T16:07:28.053417Z","iopub.status.idle":"2024-08-26T16:07:28.079558Z","shell.execute_reply.started":"2024-08-26T16:07:28.053192Z","shell.execute_reply":"2024-08-26T16:07:28.072811Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(8436879, 27)"},"metadata":{}}]},{"cell_type":"code","source":"combined_data.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:07:28.089171Z","iopub.execute_input":"2024-08-26T16:07:28.095434Z","iopub.status.idle":"2024-08-26T16:08:52.882196Z","shell.execute_reply.started":"2024-08-26T16:07:28.094791Z","shell.execute_reply":"2024-08-26T16:08:52.880322Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"# Ensure the 'tweetcreatedts' column is in datetime format\ncombined_data['tweetcreatedts'] = pd.to_datetime(combined_data['tweetcreatedts'])\n\n# Filter rows where the year is 2022\nrows_2022 = combined_data[combined_data['tweetcreatedts'].dt.year == 2022]\nrows_2023 = combined_data[combined_data['tweetcreatedts'].dt.year == 2023]\n\n# Count the number of rows\nrows_2022_count = rows_2022.shape[0]\nrows_2023_count = rows_2023.shape[0]\n\nprint(f\"Number of rows in the year 2022: {rows_2022_count}\")\nprint(f\"Number of rows in the year 2023: {rows_2023_count}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:08:52.884246Z","iopub.execute_input":"2024-08-26T16:08:52.884717Z","iopub.status.idle":"2024-08-26T16:08:59.382997Z","shell.execute_reply.started":"2024-08-26T16:08:52.884672Z","shell.execute_reply":"2024-08-26T16:08:59.381576Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Number of rows in the year 2022: 4170312\nNumber of rows in the year 2023: 4266567\n","output_type":"stream"}]},{"cell_type":"code","source":"# Ensure the 'tweetcreatedts' column is in datetime format\ncombined_data['tweetcreatedts'] = pd.to_datetime(combined_data['tweetcreatedts'])\n\n# Filter rows where the year is 2022\ndata_2022 = combined_data[combined_data['tweetcreatedts'].dt.year == 2022]\n\n# Take a random sample of 4,500 rows from the 2022 data\nsampled_data = data_2022.sample(n=4500, random_state=42)\n\n# Display the shape of the new DataFrame to confirm\nprint(f\"Sampled DataFrame shape: {sampled_data.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:08:59.384574Z","iopub.execute_input":"2024-08-26T16:08:59.385013Z","iopub.status.idle":"2024-08-26T16:09:01.268098Z","shell.execute_reply.started":"2024-08-26T16:08:59.384973Z","shell.execute_reply":"2024-08-26T16:09:01.266830Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Sampled DataFrame shape: (4500, 27)\n","output_type":"stream"}]},{"cell_type":"code","source":"sampled_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:01.272799Z","iopub.execute_input":"2024-08-26T16:09:01.273271Z","iopub.status.idle":"2024-08-26T16:09:01.306855Z","shell.execute_reply.started":"2024-08-26T16:09:01.273224Z","shell.execute_reply":"2024-08-26T16:09:01.305345Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"                      userid       username  \\\n7533216  1199523923022340096    damienjovee   \n2471552            962288264  TopBananaMall   \n1824054  1499763123603050497   FuckPutinBot   \n7714945   876746475992207360        JJNOTTS   \n3423051  1568542543154921475  nevayanefesol   \n\n                                                  acctdesc  \\\n7533216                                                NaN   \n2471552  Always foraging for soul lifting items Antique...   \n1824054  I'm a bot. Every minute of every day, I tell P...   \n7714945  Love cats, camping, gadgets, exploring new des...   \n3423051  Merhaba, ben 6 aylığım adım Neva, ailem 9 Eylü...   \n\n                               location  following  followers  totaltweets  \\\n7533216                             NaN         18         12            7   \n2471552  1,New church st tetbury Gl88DS      10607      10174        84005   \n1824054                             NaN         14        265       363159   \n7714945             Nottingham, England        650         65         1366   \n3423051                             NaN        120        218          162   \n\n                      usercreatedts              tweetid      tweetcreatedts  \\\n7533216         2019-11-27 03:04:03  1603787731892457480 2022-12-16 16:22:46   \n2471552  2012-11-21 12:08:15.000000  1568531570197204995 2022-09-10 09:27:22   \n1824054         2022-03-04 15:06:25  1594170930384801792 2022-11-20 03:29:02   \n7714945         2017-06-19 10:20:23  1590307859665158144 2022-11-09 11:38:34   \n3423051         2022-09-10 10:11:36  1573957828737437696 2022-09-25 08:49:23   \n\n         ...  original_tweet_userid original_tweet_username  \\\n7533216  ...                      0                     NaN   \n2471552  ...                      0                     NaN   \n1824054  ...                      0                     NaN   \n7714945  ...                      0                     NaN   \n3423051  ...                      0                     NaN   \n\n        in_reply_to_status_id  in_reply_to_user_id  in_reply_to_screen_name  \\\n7533216                     0                    0                      NaN   \n2471552                     0                    0                      NaN   \n1824054                     0                    0                      NaN   \n7714945   1590296568598769664  1190347566757695488          Maks_NAFO_FELLA   \n3423051                     0                    0                      NaN   \n\n         is_quote_status     quoted_status_id  quoted_status_userid  \\\n7533216            False                    0                     0   \n2471552             True  1568311016231944192   1130021685351079936   \n1824054            False                    0                     0   \n7714945            False                    0                     0   \n3423051            False                    0                     0   \n\n        quoted_status_username                 extractedts  \n7533216                    NaN  2022-12-16 19:12:43.260011  \n2471552         buitengebieden  2022-09-10 12:21:19.923128  \n1824054                    NaN  2022-11-20 15:48:27.142077  \n7714945                    NaN  2022-11-09 16:11:08.427367  \n3423051                    NaN  2022-09-25 11:42:53.467383  \n\n[5 rows x 27 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userid</th>\n      <th>username</th>\n      <th>acctdesc</th>\n      <th>location</th>\n      <th>following</th>\n      <th>followers</th>\n      <th>totaltweets</th>\n      <th>usercreatedts</th>\n      <th>tweetid</th>\n      <th>tweetcreatedts</th>\n      <th>...</th>\n      <th>original_tweet_userid</th>\n      <th>original_tweet_username</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>in_reply_to_screen_name</th>\n      <th>is_quote_status</th>\n      <th>quoted_status_id</th>\n      <th>quoted_status_userid</th>\n      <th>quoted_status_username</th>\n      <th>extractedts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7533216</th>\n      <td>1199523923022340096</td>\n      <td>damienjovee</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18</td>\n      <td>12</td>\n      <td>7</td>\n      <td>2019-11-27 03:04:03</td>\n      <td>1603787731892457480</td>\n      <td>2022-12-16 16:22:46</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2022-12-16 19:12:43.260011</td>\n    </tr>\n    <tr>\n      <th>2471552</th>\n      <td>962288264</td>\n      <td>TopBananaMall</td>\n      <td>Always foraging for soul lifting items Antique...</td>\n      <td>1,New church st tetbury Gl88DS</td>\n      <td>10607</td>\n      <td>10174</td>\n      <td>84005</td>\n      <td>2012-11-21 12:08:15.000000</td>\n      <td>1568531570197204995</td>\n      <td>2022-09-10 09:27:22</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>True</td>\n      <td>1568311016231944192</td>\n      <td>1130021685351079936</td>\n      <td>buitengebieden</td>\n      <td>2022-09-10 12:21:19.923128</td>\n    </tr>\n    <tr>\n      <th>1824054</th>\n      <td>1499763123603050497</td>\n      <td>FuckPutinBot</td>\n      <td>I'm a bot. Every minute of every day, I tell P...</td>\n      <td>NaN</td>\n      <td>14</td>\n      <td>265</td>\n      <td>363159</td>\n      <td>2022-03-04 15:06:25</td>\n      <td>1594170930384801792</td>\n      <td>2022-11-20 03:29:02</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2022-11-20 15:48:27.142077</td>\n    </tr>\n    <tr>\n      <th>7714945</th>\n      <td>876746475992207360</td>\n      <td>JJNOTTS</td>\n      <td>Love cats, camping, gadgets, exploring new des...</td>\n      <td>Nottingham, England</td>\n      <td>650</td>\n      <td>65</td>\n      <td>1366</td>\n      <td>2017-06-19 10:20:23</td>\n      <td>1590307859665158144</td>\n      <td>2022-11-09 11:38:34</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>1590296568598769664</td>\n      <td>1190347566757695488</td>\n      <td>Maks_NAFO_FELLA</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2022-11-09 16:11:08.427367</td>\n    </tr>\n    <tr>\n      <th>3423051</th>\n      <td>1568542543154921475</td>\n      <td>nevayanefesol</td>\n      <td>Merhaba, ben 6 aylığım adım Neva, ailem 9 Eylü...</td>\n      <td>NaN</td>\n      <td>120</td>\n      <td>218</td>\n      <td>162</td>\n      <td>2022-09-10 10:11:36</td>\n      <td>1573957828737437696</td>\n      <td>2022-09-25 08:49:23</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>2022-09-25 11:42:53.467383</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 27 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"sampled_data.isnull().sum().sort_values(ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:01.308704Z","iopub.execute_input":"2024-08-26T16:09:01.309139Z","iopub.status.idle":"2024-08-26T16:09:01.336401Z","shell.execute_reply.started":"2024-08-26T16:09:01.309090Z","shell.execute_reply":"2024-08-26T16:09:01.335086Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"original_tweet_username    4500\nquoted_status_username     3890\nin_reply_to_screen_name    3391\nlocation                   1600\nacctdesc                    562\nuserid                        0\nis_retweet                    0\nquoted_status_userid          0\nquoted_status_id              0\nis_quote_status               0\nin_reply_to_user_id           0\nin_reply_to_status_id         0\noriginal_tweet_userid         0\noriginal_tweet_id             0\nlanguage                      0\nfavorite_count                0\nusername                      0\nhashtags                      0\ntext                          0\nretweetcount                  0\ntweetcreatedts                0\ntweetid                       0\nusercreatedts                 0\ntotaltweets                   0\nfollowers                     0\nfollowing                     0\nextractedts                   0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"pd.set_option('display.float_format', '{:.3f}'.format)\nsampled_data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:01.337950Z","iopub.execute_input":"2024-08-26T16:09:01.338443Z","iopub.status.idle":"2024-08-26T16:09:01.400830Z","shell.execute_reply.started":"2024-08-26T16:09:01.338389Z","shell.execute_reply":"2024-08-26T16:09:01.399449Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                       userid  following    followers  totaltweets  \\\ncount                4500.000   4500.000     4500.000     4500.000   \nmean   814106320242356352.000   1488.587    32757.051    60129.806   \nmin                609033.000      0.000        0.000        1.000   \n25%             883767894.000     64.750       72.750     1578.750   \n50%   1058182684445366272.000    347.500      385.000     8102.000   \n75%   1496948825266821120.000   1170.250     1967.000    40954.750   \nmax   1606843714181160960.000 169358.000 13241505.000  4189069.000   \nstd    678434039635669504.000   5153.007   422354.732   188772.150   \n\n                      tweetid                 tweetcreatedts  retweetcount  \\\ncount                4500.000                           4500      4500.000   \nmean  1587830973524200704.000  2022-11-02 15:36:18.723333376         1.170   \nmin   1560779600938016768.000            2022-08-20 00:03:49         0.000   \n25%   1571735031989552128.000            2022-09-19 05:36:47         0.000   \n50%   1594985919519586304.000            2022-11-22 09:27:31         0.000   \n75%   1602202824302031872.000  2022-12-12 07:24:55.249999872         0.000   \nmax   1609337728180551680.000            2022-12-31 23:56:29       224.000   \nstd     16236930312909264.000                            NaN         7.900   \n\n       favorite_count  original_tweet_id  original_tweet_userid  \\\ncount        4500.000           4500.000               4500.000   \nmean            5.912              0.000                  0.000   \nmin             0.000              0.000                  0.000   \n25%             0.000              0.000                  0.000   \n50%             0.000              0.000                  0.000   \n75%             1.000              0.000                  0.000   \nmax          2485.000              0.000                  0.000   \nstd            52.090              0.000                  0.000   \n\n        in_reply_to_status_id     in_reply_to_user_id        quoted_status_id  \\\ncount                4500.000                4500.000                4500.000   \nmean   376220021206978944.000  161764440073747040.000  214504012281757248.000   \nmin                     0.000                   0.000                   0.000   \n25%                     0.000                   0.000                   0.000   \n50%                     0.000                   0.000                   0.000   \n75%                     0.000                   0.000                   0.000   \nmax   1609285048427073536.000 1606843714181160960.000 1609285546874138624.000   \nstd    674960183626562944.000  435544645735422720.000  541837792178161664.000   \n\n         quoted_status_userid  \ncount                4500.000  \nmean    81312677325974192.000  \nmin                     0.000  \n25%                     0.000  \n50%                     0.000  \n75%                     0.000  \nmax   1590442185316499456.000  \nstd    316671345843381376.000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userid</th>\n      <th>following</th>\n      <th>followers</th>\n      <th>totaltweets</th>\n      <th>tweetid</th>\n      <th>tweetcreatedts</th>\n      <th>retweetcount</th>\n      <th>favorite_count</th>\n      <th>original_tweet_id</th>\n      <th>original_tweet_userid</th>\n      <th>in_reply_to_status_id</th>\n      <th>in_reply_to_user_id</th>\n      <th>quoted_status_id</th>\n      <th>quoted_status_userid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n      <td>4500.000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>814106320242356352.000</td>\n      <td>1488.587</td>\n      <td>32757.051</td>\n      <td>60129.806</td>\n      <td>1587830973524200704.000</td>\n      <td>2022-11-02 15:36:18.723333376</td>\n      <td>1.170</td>\n      <td>5.912</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>376220021206978944.000</td>\n      <td>161764440073747040.000</td>\n      <td>214504012281757248.000</td>\n      <td>81312677325974192.000</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>609033.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>1.000</td>\n      <td>1560779600938016768.000</td>\n      <td>2022-08-20 00:03:49</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>883767894.000</td>\n      <td>64.750</td>\n      <td>72.750</td>\n      <td>1578.750</td>\n      <td>1571735031989552128.000</td>\n      <td>2022-09-19 05:36:47</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1058182684445366272.000</td>\n      <td>347.500</td>\n      <td>385.000</td>\n      <td>8102.000</td>\n      <td>1594985919519586304.000</td>\n      <td>2022-11-22 09:27:31</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1496948825266821120.000</td>\n      <td>1170.250</td>\n      <td>1967.000</td>\n      <td>40954.750</td>\n      <td>1602202824302031872.000</td>\n      <td>2022-12-12 07:24:55.249999872</td>\n      <td>0.000</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1606843714181160960.000</td>\n      <td>169358.000</td>\n      <td>13241505.000</td>\n      <td>4189069.000</td>\n      <td>1609337728180551680.000</td>\n      <td>2022-12-31 23:56:29</td>\n      <td>224.000</td>\n      <td>2485.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>1609285048427073536.000</td>\n      <td>1606843714181160960.000</td>\n      <td>1609285546874138624.000</td>\n      <td>1590442185316499456.000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>678434039635669504.000</td>\n      <td>5153.007</td>\n      <td>422354.732</td>\n      <td>188772.150</td>\n      <td>16236930312909264.000</td>\n      <td>NaN</td>\n      <td>7.900</td>\n      <td>52.090</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>674960183626562944.000</td>\n      <td>435544645735422720.000</td>\n      <td>541837792178161664.000</td>\n      <td>316671345843381376.000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"columns_to_describe = ['following', 'followers', 'totaltweets', 'retweetcount', 'favorite_count']\ncombined_data[columns_to_describe].describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:01.402478Z","iopub.execute_input":"2024-08-26T16:09:01.402900Z","iopub.status.idle":"2024-08-26T16:09:03.503708Z","shell.execute_reply.started":"2024-08-26T16:09:01.402857Z","shell.execute_reply":"2024-08-26T16:09:03.502143Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"        following    followers  totaltweets  retweetcount  favorite_count\ncount 8436879.000  8436879.000  8436879.000   8436879.000     8436879.000\nmean     1590.062    25301.044    63086.086        45.108           6.075\nstd      6974.624   368157.629   286959.675       441.413         105.033\nmin         0.000        0.000        0.000         0.000           0.000\n25%        83.000       81.000     2197.000         0.000           0.000\n50%       376.000      419.000    10090.000         0.000           0.000\n75%      1342.000     1924.000    44477.000         1.000           1.000\nmax   1509169.000 54710308.000 51764711.000    138030.000      155191.000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>following</th>\n      <th>followers</th>\n      <th>totaltweets</th>\n      <th>retweetcount</th>\n      <th>favorite_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>8436879.000</td>\n      <td>8436879.000</td>\n      <td>8436879.000</td>\n      <td>8436879.000</td>\n      <td>8436879.000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1590.062</td>\n      <td>25301.044</td>\n      <td>63086.086</td>\n      <td>45.108</td>\n      <td>6.075</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6974.624</td>\n      <td>368157.629</td>\n      <td>286959.675</td>\n      <td>441.413</td>\n      <td>105.033</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>83.000</td>\n      <td>81.000</td>\n      <td>2197.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>376.000</td>\n      <td>419.000</td>\n      <td>10090.000</td>\n      <td>0.000</td>\n      <td>0.000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1342.000</td>\n      <td>1924.000</td>\n      <td>44477.000</td>\n      <td>1.000</td>\n      <td>1.000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1509169.000</td>\n      <td>54710308.000</td>\n      <td>51764711.000</td>\n      <td>138030.000</td>\n      <td>155191.000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Visual EDA","metadata":{}},{"cell_type":"code","source":"# Set the theme for all plots with whitegrid style\nsns.set_theme(style=\"whitegrid\")\n\n# Use the 'inferno' color palette for all plots\npalette = sns.color_palette(\"inferno\", as_cmap=True)\n\n# Update matplotlib parameters for a consistent appearance\nplt.rcParams.update({\n    \"figure.figsize\": (10, 6),  # Consistent figure size\n    \"axes.titlesize\": 16,  # Title size\n    \"axes.labelsize\": 14,  # Axis labels size\n    \"xtick.labelsize\": 12,  # X-tick labels size\n    \"ytick.labelsize\": 12,  # Y-tick labels size\n    \"legend.fontsize\": 12,  # Legend font size\n    \"axes.titlepad\": 20,  # Title padding\n    \"axes.grid\": True,  # Show grid\n    \"grid.alpha\": 0.3,  # Grid transparency\n    \"axes.spines.right\": False,  # Hide right spine\n    \"axes.spines.top\": False,  # Hide top spine\n})","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:03.505304Z","iopub.execute_input":"2024-08-26T16:09:03.505728Z","iopub.status.idle":"2024-08-26T16:09:03.519230Z","shell.execute_reply.started":"2024-08-26T16:09:03.505677Z","shell.execute_reply":"2024-08-26T16:09:03.517412Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"# 1. Who are the key influencers in Twitter discussions about the Ukraine-Russia conflict, and how are different groups connected?","metadata":{}},{"cell_type":"markdown","source":"## 1.1 Identify Key Influencers","metadata":{}},{"cell_type":"markdown","source":"### 1.1.1 Identify Key Influencers by Follower Count","metadata":{}},{"cell_type":"code","source":"# Top 10 users by follower count\ntop_followers = sampled_data[['username', 'followers']].drop_duplicates().sort_values(by='followers', ascending=False).head(20)\nprint(\"Top 10 users by followers:\")\ntop_followers","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:03.520929Z","iopub.execute_input":"2024-08-26T16:09:03.521585Z","iopub.status.idle":"2024-08-26T16:09:03.553804Z","shell.execute_reply.started":"2024-08-26T16:09:03.521521Z","shell.execute_reply":"2024-08-26T16:09:03.552548Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Top 10 users by followers:\n","output_type":"stream"},{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"              username  followers\n5177158   CGTNOfficial   13241505\n4921178        ABPNews   13137307\n2288376      lemondefr   10349158\n5645696       htTweets    8682752\n950599        htTweets    8662078\n3056702        ZeeNews    6272423\n7094369      CNNnews18    4735889\n6717821    France24_fr    4690581\n5099299  EconomicTimes    4270375\n2463175     tagesschau    3764415\n5542226    noticierovv    3640397\n7506080    Independent    3631438\n1719378   ActualidadRT    3513705\n4424669      Mediapart    3003900\n443589   ESPNArgentina    2634424\n399249   DainikBhaskar    2151056\n2281148          NYMag    1812198\n4529366    polimernews    1704375\n1449737   AmeyawDebrah    1573282\n1380995    polimernews    1572334","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>username</th>\n      <th>followers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5177158</th>\n      <td>CGTNOfficial</td>\n      <td>13241505</td>\n    </tr>\n    <tr>\n      <th>4921178</th>\n      <td>ABPNews</td>\n      <td>13137307</td>\n    </tr>\n    <tr>\n      <th>2288376</th>\n      <td>lemondefr</td>\n      <td>10349158</td>\n    </tr>\n    <tr>\n      <th>5645696</th>\n      <td>htTweets</td>\n      <td>8682752</td>\n    </tr>\n    <tr>\n      <th>950599</th>\n      <td>htTweets</td>\n      <td>8662078</td>\n    </tr>\n    <tr>\n      <th>3056702</th>\n      <td>ZeeNews</td>\n      <td>6272423</td>\n    </tr>\n    <tr>\n      <th>7094369</th>\n      <td>CNNnews18</td>\n      <td>4735889</td>\n    </tr>\n    <tr>\n      <th>6717821</th>\n      <td>France24_fr</td>\n      <td>4690581</td>\n    </tr>\n    <tr>\n      <th>5099299</th>\n      <td>EconomicTimes</td>\n      <td>4270375</td>\n    </tr>\n    <tr>\n      <th>2463175</th>\n      <td>tagesschau</td>\n      <td>3764415</td>\n    </tr>\n    <tr>\n      <th>5542226</th>\n      <td>noticierovv</td>\n      <td>3640397</td>\n    </tr>\n    <tr>\n      <th>7506080</th>\n      <td>Independent</td>\n      <td>3631438</td>\n    </tr>\n    <tr>\n      <th>1719378</th>\n      <td>ActualidadRT</td>\n      <td>3513705</td>\n    </tr>\n    <tr>\n      <th>4424669</th>\n      <td>Mediapart</td>\n      <td>3003900</td>\n    </tr>\n    <tr>\n      <th>443589</th>\n      <td>ESPNArgentina</td>\n      <td>2634424</td>\n    </tr>\n    <tr>\n      <th>399249</th>\n      <td>DainikBhaskar</td>\n      <td>2151056</td>\n    </tr>\n    <tr>\n      <th>2281148</th>\n      <td>NYMag</td>\n      <td>1812198</td>\n    </tr>\n    <tr>\n      <th>4529366</th>\n      <td>polimernews</td>\n      <td>1704375</td>\n    </tr>\n    <tr>\n      <th>1449737</th>\n      <td>AmeyawDebrah</td>\n      <td>1573282</td>\n    </tr>\n    <tr>\n      <th>1380995</th>\n      <td>polimernews</td>\n      <td>1572334</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"palette = sns.color_palette(\"inferno\", n_colors=10)\n\n# Plotting\nplt.figure()\nsns.barplot(x=top_followers['followers'], y=top_followers['username'], palette=palette)\nplt.xlabel('Number of Followers')\nplt.ylabel('Username')\nplt.title('Top 10 Users by Follower Count')\nplt.gca().invert_yaxis()  # Invert y-axis to have the highest at the top\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:19.927636Z","iopub.execute_input":"2024-08-26T16:35:19.928418Z","iopub.status.idle":"2024-08-26T16:35:20.594903Z","shell.execute_reply.started":"2024-08-26T16:35:19.928363Z","shell.execute_reply":"2024-08-26T16:35:20.593711Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.1.2 Identify Key Influencers by Retweet Count","metadata":{}},{"cell_type":"code","source":"# Top 10 tweets by retweet count\ntop_retweets = sampled_data[['username', 'retweetcount']].sort_values(by='retweetcount', ascending=False).head(10)\nprint(\"Top 10 tweets by retweet count:\")\ntop_retweets","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:25.665818Z","iopub.execute_input":"2024-08-26T16:35:25.667644Z","iopub.status.idle":"2024-08-26T16:35:25.708992Z","shell.execute_reply.started":"2024-08-26T16:35:25.667563Z","shell.execute_reply":"2024-08-26T16:35:25.706995Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Top 10 tweets by retweet count:\n","output_type":"stream"},{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"                username  retweetcount\n253204   KramarenkoMari3           224\n1562652  DrRobertoMOjeda           220\n5641151         nexta_tv           184\n2788131     GlasnostGone           146\n2532977     EuromaidanPR            96\n2200722      Blue_Sauron            94\n7536682        UKR_token            91\n1776160      AssoApollon            90\n8393617      JoeTalkShow            86\n270018    UAarmy_animals            82","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>username</th>\n      <th>retweetcount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>253204</th>\n      <td>KramarenkoMari3</td>\n      <td>224</td>\n    </tr>\n    <tr>\n      <th>1562652</th>\n      <td>DrRobertoMOjeda</td>\n      <td>220</td>\n    </tr>\n    <tr>\n      <th>5641151</th>\n      <td>nexta_tv</td>\n      <td>184</td>\n    </tr>\n    <tr>\n      <th>2788131</th>\n      <td>GlasnostGone</td>\n      <td>146</td>\n    </tr>\n    <tr>\n      <th>2532977</th>\n      <td>EuromaidanPR</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>2200722</th>\n      <td>Blue_Sauron</td>\n      <td>94</td>\n    </tr>\n    <tr>\n      <th>7536682</th>\n      <td>UKR_token</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <th>1776160</th>\n      <td>AssoApollon</td>\n      <td>90</td>\n    </tr>\n    <tr>\n      <th>8393617</th>\n      <td>JoeTalkShow</td>\n      <td>86</td>\n    </tr>\n    <tr>\n      <th>270018</th>\n      <td>UAarmy_animals</td>\n      <td>82</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure()\nsns.barplot(x=top_retweets['retweetcount'], y=top_retweets['username'], palette=palette)\nplt.xlabel('Number of Retweets')\nplt.ylabel('Username')\nplt.title('Top 10 Tweets by Retweet Count')\nplt.gca().invert_yaxis()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:27.897017Z","iopub.execute_input":"2024-08-26T16:35:27.897560Z","iopub.status.idle":"2024-08-26T16:35:28.309640Z","shell.execute_reply.started":"2024-08-26T16:35:27.897512Z","shell.execute_reply":"2024-08-26T16:35:28.308355Z"},"trusted":true},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.1.3 Identify Key Influencers by Mention Frequency","metadata":{}},{"cell_type":"code","source":"# Create a new column for mentions by extracting usernames from the 'text'\nsampled_data['mentions'] = sampled_data['text'].str.findall(r'@\\w+')\n\n# Count mentions by user\nmention_counts = sampled_data.explode('mentions')['mentions'].value_counts().head(10)\nprint(\"Top 10 most mentioned users:\")\nmention_counts","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:31.521738Z","iopub.execute_input":"2024-08-26T16:35:31.522242Z","iopub.status.idle":"2024-08-26T16:35:31.613926Z","shell.execute_reply.started":"2024-08-26T16:35:31.522193Z","shell.execute_reply":"2024-08-26T16:35:31.612689Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Top 10 most mentioned users:\n","output_type":"stream"},{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"mentions\n@POTUS              44\n@ZelenskyyUa        29\n@elonmusk           22\n@YouTube            21\n@mfa_russia         19\n@Bundeskanzler      18\n@UN                 15\n@KyivIndependent    14\n@BBCWorld           14\n@NATO               14\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure()\nmention_counts.sort_values(ascending=False).plot(kind='bar', color=palette)\nplt.xlabel('Username')\nplt.ylabel('Mention Frequency')\nplt.title('Top 10 Most Mentioned Users')\nplt.xticks(rotation=45, ha='right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:37.430352Z","iopub.execute_input":"2024-08-26T16:35:37.430835Z","iopub.status.idle":"2024-08-26T16:35:37.871094Z","shell.execute_reply.started":"2024-08-26T16:35:37.430788Z","shell.execute_reply":"2024-08-26T16:35:37.869780Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.1.4 Analyze Engagement Metrics","metadata":{}},{"cell_type":"code","source":"# Calculate total engagement (retweets + favorites)\nsampled_data['total_engagement'] = sampled_data['retweetcount'] + sampled_data['favorite_count']\n\n# Top 10 tweets by engagement\ntop_engagement = sampled_data[['username', 'total_engagement']].sort_values(by='total_engagement', ascending=False).head(10)\nprint(\"Top 10 tweets by total engagement:\")\ntop_engagement","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:35:40.769749Z","iopub.execute_input":"2024-08-26T16:35:40.770341Z","iopub.status.idle":"2024-08-26T16:35:40.796695Z","shell.execute_reply.started":"2024-08-26T16:35:40.770287Z","shell.execute_reply":"2024-08-26T16:35:40.795073Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"Top 10 tweets by total engagement:\n","output_type":"stream"},{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"                username  total_engagement\n253204   KramarenkoMari3              2709\n5641151         nexta_tv              1214\n2200722      Blue_Sauron              1061\n270018    UAarmy_animals               935\n5623921    VarlanOlivier               771\n2192844  Militarylandnet               621\n1731241         nexta_tv               529\n8393617      JoeTalkShow               493\n2532977     EuromaidanPR               478\n2788131     GlasnostGone               470","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>username</th>\n      <th>total_engagement</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>253204</th>\n      <td>KramarenkoMari3</td>\n      <td>2709</td>\n    </tr>\n    <tr>\n      <th>5641151</th>\n      <td>nexta_tv</td>\n      <td>1214</td>\n    </tr>\n    <tr>\n      <th>2200722</th>\n      <td>Blue_Sauron</td>\n      <td>1061</td>\n    </tr>\n    <tr>\n      <th>270018</th>\n      <td>UAarmy_animals</td>\n      <td>935</td>\n    </tr>\n    <tr>\n      <th>5623921</th>\n      <td>VarlanOlivier</td>\n      <td>771</td>\n    </tr>\n    <tr>\n      <th>2192844</th>\n      <td>Militarylandnet</td>\n      <td>621</td>\n    </tr>\n    <tr>\n      <th>1731241</th>\n      <td>nexta_tv</td>\n      <td>529</td>\n    </tr>\n    <tr>\n      <th>8393617</th>\n      <td>JoeTalkShow</td>\n      <td>493</td>\n    </tr>\n    <tr>\n      <th>2532977</th>\n      <td>EuromaidanPR</td>\n      <td>478</td>\n    </tr>\n    <tr>\n      <th>2788131</th>\n      <td>GlasnostGone</td>\n      <td>470</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure()\nsns.barplot(x=top_engagement['total_engagement'], y=top_engagement['username'], palette=palette)\nplt.xlabel('Total Engagement (Retweets + Favorites)')\nplt.ylabel('Username')\nplt.title('Top 10 Tweets by Total Engagement')\nplt.gca()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:41:49.600208Z","iopub.execute_input":"2024-08-26T16:41:49.600783Z","iopub.status.idle":"2024-08-26T16:41:50.090666Z","shell.execute_reply.started":"2024-08-26T16:41:49.600739Z","shell.execute_reply":"2024-08-26T16:41:50.089151Z"},"trusted":true},"execution_count":36,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### 1.1.5 Degree Centrality (Network Analysis)","metadata":{}},{"cell_type":"code","source":"# Create a directed graph from the sampled data\nG = nx.DiGraph()\n\n# Add nodes and edges based on retweets and replies\nG.add_nodes_from(sampled_data['userid'].unique())\n\n# Adding edges for retweets\nfor _, row in sampled_data.dropna(subset=['original_tweet_userid']).iterrows():\n    if row['original_tweet_userid'] != 0:\n        G.add_edge(row['userid'], row['original_tweet_userid'], interaction_type='retweet')\n\n# Adding edges for replies\nfor _, row in sampled_data.dropna(subset=['in_reply_to_user_id']).iterrows():\n    if row['in_reply_to_user_id'] != 0:\n        G.add_edge(row['userid'], row['in_reply_to_user_id'], interaction_type='reply')\n\n# Calculate degree centrality\ndegree_centrality = nx.degree_centrality(G)\n\n# Sort nodes by degree centrality and get the top 10 influencers\ntop_influencers = sorted(degree_centrality.items(), key=lambda item: item[1], reverse=True)[:10]\n\nprint(\"Top 10 influencers based on degree centrality:\")\nfor node, centrality in top_influencers:\n    print(f\"User ID: {node}, Degree Centrality: {centrality}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:37:12.387256Z","iopub.execute_input":"2024-08-26T16:37:12.389047Z","iopub.status.idle":"2024-08-26T16:37:13.111753Z","shell.execute_reply.started":"2024-08-26T16:37:12.388973Z","shell.execute_reply":"2024-08-26T16:37:13.110412Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Top 10 influencers based on degree centrality:\nUser ID: 1462548977367359488, Degree Centrality: 0.002204099625303064\nUser ID: 1349149096909668352, Degree Centrality: 0.002204099625303064\nUser ID: 2542991089, Degree Centrality: 0.0019836896627727575\nUser ID: 114718372, Degree Centrality: 0.0015428697377121447\nUser ID: 1222773302441148416, Degree Centrality: 0.0015428697377121447\nUser ID: 44196397, Degree Centrality: 0.0015428697377121447\nUser ID: 1120633726478823424, Degree Centrality: 0.0015428697377121447\nUser ID: 2687934091, Degree Centrality: 0.0013224597751818382\nUser ID: 1521822182002806784, Degree Centrality: 0.001102049812651532\nUser ID: 1891490382, Degree Centrality: 0.001102049812651532\n","output_type":"stream"}]},{"cell_type":"code","source":"# Create a mapping from userid to username\nuserid_to_username = dict(zip(sampled_data['userid'], sampled_data['username']))\n\n# Map the user IDs in top influencers to their corresponding usernames\ntop_influencers_df['Username'] = top_influencers_df['User ID'].map(userid_to_username)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:06:31.995301Z","iopub.execute_input":"2024-08-26T17:06:31.996003Z","iopub.status.idle":"2024-08-26T17:06:32.017924Z","shell.execute_reply.started":"2024-08-26T17:06:31.995944Z","shell.execute_reply":"2024-08-26T17:06:32.016210Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"# Visualize the top influencers using their usernames\nplt.figure()\nsns.barplot(x=top_influencers_df['Degree Centrality'], y=top_influencers_df['Username'], palette=palette)\nplt.xlabel('Degree Centrality')\nplt.ylabel('Username')\nplt.title('Top 10 Influencers by Degree Centrality')\nplt.gca().invert_yaxis()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:06:38.957268Z","iopub.execute_input":"2024-08-26T17:06:38.957756Z","iopub.status.idle":"2024-08-26T17:06:39.392420Z","shell.execute_reply.started":"2024-08-26T17:06:38.957711Z","shell.execute_reply":"2024-08-26T17:06:39.390976Z"},"trusted":true},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.2 Community Detection using the Louvain Method","metadata":{}},{"cell_type":"code","source":"# Convert directed graph to undirected graph\nG_undirected = G_sub.to_undirected()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:06:53.088416Z","iopub.execute_input":"2024-08-26T17:06:53.088903Z","iopub.status.idle":"2024-08-26T17:06:53.164542Z","shell.execute_reply.started":"2024-08-26T17:06:53.088858Z","shell.execute_reply":"2024-08-26T17:06:53.162604Z"},"trusted":true},"execution_count":42,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[42], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Convert directed graph to undirected graph\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m G_undirected \u001b[38;5;241m=\u001b[39m \u001b[43mG_sub\u001b[49m\u001b[38;5;241m.\u001b[39mto_undirected()\n","\u001b[0;31mNameError\u001b[0m: name 'G_sub' is not defined"],"ename":"NameError","evalue":"name 'G_sub' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# Detect communities using the Louvain method\npartition = community_louvain.best_partition(G_undirected)\n\n# Add community information to the graph\nnx.set_node_attributes(G_undirected, partition, 'community')\n\n# Visualize the network with communities\nplt.figure(figsize=(12, 12))\npos = nx.spring_layout(G_undirected, seed=42)  # Layout for network\ncmap = sns.color_palette(\"inferno\", as_cmap=True)\n\n# Draw the nodes with colors representing their community\nnx.draw_networkx_nodes(G_undirected, pos, node_color=[partition[node] for node in G_undirected.nodes()], cmap=cmap, node_size=500)\nnx.draw_networkx_edges(G_undirected, pos, alpha=0.3)\nnx.draw_networkx_labels(G_undirected, pos, font_size=10, font_color=\"white\")\n\nplt.title('Network Graph with Community Detection')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:07:41.157255Z","iopub.execute_input":"2024-08-26T17:07:41.158699Z","iopub.status.idle":"2024-08-26T17:07:41.231466Z","shell.execute_reply.started":"2024-08-26T17:07:41.158609Z","shell.execute_reply":"2024-08-26T17:07:41.229519Z"},"trusted":true},"execution_count":43,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[43], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Detect communities using the Louvain method\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m partition \u001b[38;5;241m=\u001b[39m community_louvain\u001b[38;5;241m.\u001b[39mbest_partition(\u001b[43mG_undirected\u001b[49m)\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Add community information to the graph\u001b[39;00m\n\u001b[1;32m      5\u001b[0m nx\u001b[38;5;241m.\u001b[39mset_node_attributes(G_undirected, partition, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcommunity\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'G_undirected' is not defined"],"ename":"NameError","evalue":"name 'G_undirected' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# Create a directed graph\nG_sub = nx.DiGraph()\n\n# Add nodes (users)\nG_sub.add_nodes_from(sampled_data['userid'].unique())\n\n# Add edges based on retweets, replies, and mentions\n# Retweets\nfor _, row in sampled_data.dropna(subset=['original_tweet_userid']).iterrows():\n    if row['original_tweet_userid'] != 0:\n        G_sub.add_edge(row['userid'], row['original_tweet_userid'], interaction_type='retweet')\n\n# Replies\nfor _, row in sampled_data.dropna(subset=['in_reply_to_user_id']).iterrows():\n    if row['in_reply_to_user_id'] != 0:\n        G_sub.add_edge(row['userid'], row['in_reply_to_user_id'], interaction_type='reply')\n\n# Mentions (assuming you have a column for mentions)\n# Example: Add edges for mentions if you have such data\n# for _, row in sampled_data.dropna(subset=['mentions_column']).iterrows():\n#     for mentioned_user in row['mentions_column']:\n#         G_sub.add_edge(row['userid'], mentioned_user, interaction_type='mention')\n\n# Print basic information about the graph\nprint(f\"Number of nodes: {G_sub.number_of_nodes()}\")\nprint(f\"Number of edges: {G_sub.number_of_edges()}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:07:46.451723Z","iopub.execute_input":"2024-08-26T17:07:46.452257Z","iopub.status.idle":"2024-08-26T17:07:47.248604Z","shell.execute_reply.started":"2024-08-26T17:07:46.452212Z","shell.execute_reply":"2024-08-26T17:07:47.246893Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Number of nodes: 4538\nNumber of edges: 1091\n","output_type":"stream"}]},{"cell_type":"code","source":"# Convert directed graph to undirected graph\nG_undirected = G_sub.to_undirected()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T17:08:46.040745Z","iopub.execute_input":"2024-08-26T17:08:46.041288Z","iopub.status.idle":"2024-08-26T17:08:46.095154Z","shell.execute_reply.started":"2024-08-26T17:08:46.041240Z","shell.execute_reply":"2024-08-26T17:08:46.093351Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# Detect communities using the Louvain method\npartition = community_louvain.best_partition(G_undirected)\n\n# Add community information to the graph\nnx.set_node_attributes(G_undirected, partition, 'community')\n\n# Visualize the network with communities\nplt.figure(figsize=(12, 12))\npos = nx.spring_layout(G_undirected, seed=42)  # Layout for network\ncmap = sns.color_palette(\"inferno\", as_cmap=True)\n\n# Draw the nodes with colors representing their community\nnx.draw_networkx_nodes(G_undirected, pos, node_color=[partition[node] for node in G_undirected.nodes()], cmap=cmap, node_size=500)\nnx.draw_networkx_edges(G_undirected, pos, alpha=0.3)\nnx.draw_networkx_labels(G_undirected, pos, font_size=10, font_color=\"white\")\n\nplt.title('Network Graph with Community Detection')\nplt.show()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 2. How do sentiments about the conflict change over time, especially during key events such as diplomatic talks or military actions?\n","metadata":{}},{"cell_type":"markdown","source":"## Step 1: Sentiment Analysis\n### 1.1 Text Preprocessing","metadata":{}},{"cell_type":"markdown","source":"We'll clean the tweet text by removing unnecessary elements such as URLs, mentions, hashtags, special characters, stopwords and converting emojies to words.","metadata":{}},{"cell_type":"code","source":"# Ensure stopwords are downloaded\nnltk.download('stopwords')\n\n# Function to replace emojis with text\ndef replace_emojis(text):\n    return emoji.demojize(text)\n\n# Preprocessing function\ndef preprocess_text(text):\n    # Replace emojis with text\n    text = replace_emojis(text)\n    \n    # Remove URLs\n    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text, flags=re.MULTILINE)\n    \n    # Remove mentions and hashtags\n    text = re.sub(r'\\@\\w+|\\#', '', text)\n    \n    # Remove special characters, numbers, and punctuations\n    text = re.sub(r'[^A-Za-z\\s]', '', text)\n    \n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove stopwords\n    stop_words = set(stopwords.words('english'))\n    text = ' '.join([word for word in text.split() if word not in stop_words])\n    \n    return text\n\n# Apply preprocessing to the 'text' column\nsampled_data['cleaned_text'] = sampled_data['text'].apply(preprocess_text)\n\n# Display the first few cleaned tweets\nsampled_data[['text', 'cleaned_text']].head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.450186Z","iopub.status.idle":"2024-08-26T16:09:05.450651Z","shell.execute_reply.started":"2024-08-26T16:09:05.450424Z","shell.execute_reply":"2024-08-26T16:09:05.450448Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sampled_data","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.452115Z","iopub.status.idle":"2024-08-26T16:09:05.452551Z","shell.execute_reply.started":"2024-08-26T16:09:05.452342Z","shell.execute_reply":"2024-08-26T16:09:05.452363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 1.2 Sentiment Scoring","metadata":{}},{"cell_type":"code","source":"# Load the multilingual emotion classifier model\nmultilingual_emotion_classifier = pipeline('text-classification', model='j-hartmann/emotion-english-distilroberta-base', return_all_scores=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.454775Z","iopub.status.idle":"2024-08-26T16:09:05.455240Z","shell.execute_reply.started":"2024-08-26T16:09:05.455006Z","shell.execute_reply":"2024-08-26T16:09:05.455028Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply the multilingual emotion classifier to the 'cleaned_text' column\nsampled_data['emotions'] = sampled_data['cleaned_text'].apply(lambda x: multilingual_emotion_classifier(x)[0])\n\n# Extract the dominant emotion from the list of scores\ndef get_dominant_emotion(emotion_scores):\n    # The classifier returns a list of dictionaries\n    return max(emotion_scores, key=lambda score: score['score'])['label']\n\n# Now, apply the get_dominant_emotion function to extract the dominant emotion\nsampled_data['dominant_emotion'] = sampled_data['emotions'].apply(get_dominant_emotion)\n\n# Display the first few rows with classified emotions\nsampled_data[['cleaned_text', 'dominant_emotion']].head()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.457824Z","iopub.status.idle":"2024-08-26T16:09:05.458495Z","shell.execute_reply.started":"2024-08-26T16:09:05.458174Z","shell.execute_reply":"2024-08-26T16:09:05.458207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 2: Temporal Analysis\n### 1. Group Emotions by Time Period (e.g., by Day)","metadata":{}},{"cell_type":"code","source":"# First, ensure the 'tweetcreatedts' column is in datetime format\nsampled_data['tweetcreatedts'] = pd.to_datetime(sampled_data['tweetcreatedts'])\n\n# Group by day and calculate the distribution of emotions\nemotions_over_time = sampled_data.groupby([sampled_data['tweetcreatedts'].dt.date, 'dominant_emotion']).size().unstack().fillna(0)\n\n# Display the first few rows to understand the structure\nemotions_over_time.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.460457Z","iopub.status.idle":"2024-08-26T16:09:05.460941Z","shell.execute_reply.started":"2024-08-26T16:09:05.460706Z","shell.execute_reply":"2024-08-26T16:09:05.460731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 3: Visualize the Emotional Trends Over Time","metadata":{}},{"cell_type":"code","source":"# Plotting the emotion trends over time\nemotions_over_time.plot(figsize=(14, 7), kind='line', marker='o')\n\nplt.title('Emotion Trends Over Time')\nplt.xlabel('Date')\nplt.ylabel('Number of Tweets')\nplt.legend(title='Emotion')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.462810Z","iopub.status.idle":"2024-08-26T16:09:05.463311Z","shell.execute_reply.started":"2024-08-26T16:09:05.463075Z","shell.execute_reply":"2024-08-26T16:09:05.463106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate the total number of tweets per day across all emotions\ntotal_emotions_per_day = emotions_over_time.sum(axis=1)\n\n# Identify the top 5 days with the highest total emotional spikes\ntop_spike_dates = total_emotions_per_day.nlargest(5)\n\n# Display these top 5 dates and their emotions in a DataFrame\ntop_spike_dates_df = emotions_over_time.loc[top_spike_dates.index]\ntop_spike_dates_df\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.465142Z","iopub.status.idle":"2024-08-26T16:09:05.465606Z","shell.execute_reply.started":"2024-08-26T16:09:05.465379Z","shell.execute_reply":"2024-08-26T16:09:05.465402Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Stacked area chart to show the distribution of emotions over time\nemotions_over_time.plot.area(figsize=(14, 7), alpha=0.4)\n\nplt.title('Stacked Area Chart of Emotion Trends Over Time')\nplt.xlabel('Date')\nplt.ylabel('Number of Tweets')\nplt.legend(title='Emotion')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.467221Z","iopub.status.idle":"2024-08-26T16:09:05.467728Z","shell.execute_reply.started":"2024-08-26T16:09:05.467447Z","shell.execute_reply":"2024-08-26T16:09:05.467468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\n\n# Heatmap of emotions over time\nplt.figure(figsize=(14, 7))\nsns.heatmap(emotions_over_time.T, cmap=\"YlGnBu\", cbar=True, linewidths=.5)\n\nplt.title('Heatmap of Emotions Over Time')\nplt.xlabel('Date')\nplt.ylabel('Emotion')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.469273Z","iopub.status.idle":"2024-08-26T16:09:05.469732Z","shell.execute_reply.started":"2024-08-26T16:09:05.469515Z","shell.execute_reply":"2024-08-26T16:09:05.469537Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Ensure that the index of emotions_over_time is a DatetimeIndex\nemotions_over_time.index = pd.to_datetime(emotions_over_time.index)\n\n# Now, you can resample the data by week and calculate the mean\nweekly_emotions = emotions_over_time.resample('W').mean()\n\n# Plot the grouped bar chart\nweekly_emotions.plot(kind='bar', stacked=False, figsize=(14, 7))\n\nplt.title('Weekly Average of Emotion Trends')\nplt.xlabel('Week')\nplt.ylabel('Average Number of Tweets')\nplt.legend(title='Emotion')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.471427Z","iopub.status.idle":"2024-08-26T16:09:05.471895Z","shell.execute_reply.started":"2024-08-26T16:09:05.471668Z","shell.execute_reply":"2024-08-26T16:09:05.471689Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Boxplot of emotion counts over time\nplt.figure(figsize=(14, 7))\nsns.boxplot(data=emotions_over_time)\n\nplt.title('Boxplot of Emotions Over Time')\nplt.xlabel('Emotion')\nplt.ylabel('Number of Tweets')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.474130Z","iopub.status.idle":"2024-08-26T16:09:05.474582Z","shell.execute_reply.started":"2024-08-26T16:09:05.474364Z","shell.execute_reply":"2024-08-26T16:09:05.474387Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Total count of each emotion over the entire period\ntotal_emotions = emotions_over_time.sum()\n\n# Pie chart\ntotal_emotions.plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8))\n\nplt.title('Overall Distribution of Emotions')\nplt.ylabel('')  # Hide the y-label for clarity\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.476731Z","iopub.status.idle":"2024-08-26T16:09:05.477892Z","shell.execute_reply.started":"2024-08-26T16:09:05.477587Z","shell.execute_reply":"2024-08-26T16:09:05.477615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n# Assuming 'total_emotions' is a Pandas Series with emotion labels as index and counts as values\ntotal_emotions = emotions_over_time.sum()\n\n# Create a Plotly pie chart\nfig = px.pie(total_emotions, \n             values=total_emotions.values, \n             names=total_emotions.index, \n             title='Overall Distribution of Emotions',\n             hole=0.3)\n\n# Update hover template to show percentages\nfig.update_traces(hovertemplate='%{label}: %{percent:.1%}')\n\n# Show the interactive plot\nfig.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.479375Z","iopub.status.idle":"2024-08-26T16:09:05.479868Z","shell.execute_reply.started":"2024-08-26T16:09:05.479630Z","shell.execute_reply":"2024-08-26T16:09:05.479662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Example: Adding key event markers to the emotion trends graph\nplt.figure(figsize=(14, 7))\nemotions_over_time.plot(ax=plt.gca(), marker='o')\n\n# Annotating key events (example dates and events)\nevents = {\n    '2022-09-15': 'Major Military Action',\n    '2022-11-15': 'Peace Talks Announced',\n    '2022-12-10': 'Sanctions Imposed'\n}\n\nfor date, event in events.items():\n    plt.axvline(pd.to_datetime(date), color='red', linestyle='--')\n    plt.text(pd.to_datetime(date), plt.ylim()[1], event, rotation=90, verticalalignment='top', fontsize=12)\n\nplt.title('Emotion Trends Over Time with Key Events')\nplt.xlabel('Date')\nplt.ylabel('Number of Tweets')\nplt.legend(title='Emotion')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.481875Z","iopub.status.idle":"2024-08-26T16:09:05.482372Z","shell.execute_reply.started":"2024-08-26T16:09:05.482141Z","shell.execute_reply":"2024-08-26T16:09:05.482165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to create word cloud\ndef create_emotion_wordcloud(emotion, color):\n    # Filter the tweets by emotion\n    text = \" \".join(tweet for tweet in sampled_data[sampled_data['dominant_emotion'] == emotion]['cleaned_text'])\n    \n    # Generate word cloud\n    wordcloud = WordCloud(width=800, height=400, background_color='white', colormap=color, max_words=100).generate(text)\n    \n    # Plot the word cloud\n    plt.figure(figsize=(10, 5))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.title(f'{emotion.capitalize()} Word Cloud', fontsize=16)\n    plt.show()\n\n# Create word clouds for different emotions\nemotions_colors = {\n    'anger': 'Reds',\n    'joy': 'Greens',\n    'sadness': 'Blues',\n    'fear': 'Purples',\n    'disgust': 'Oranges',\n    'surprise': 'Greys',\n    'neutral': 'YlGn'\n}\n\nfor emotion, color in emotions_colors.items():\n    create_emotion_wordcloud(emotion, color)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.485045Z","iopub.status.idle":"2024-08-26T16:09:05.485580Z","shell.execute_reply.started":"2024-08-26T16:09:05.485346Z","shell.execute_reply":"2024-08-26T16:09:05.485369Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 3. Can past Twitter data be used to predict future trends or shifts in public discussion about the conflict?\n## Step 1: Data Preparation\n### 1.1 Feature Engineering\n#### 1.1.1 Extract Time-Based Features","metadata":{}},{"cell_type":"code","source":"# Extract time-based features\nsampled_data['day_of_week'] = sampled_data['tweetcreatedts'].dt.dayofweek  # Monday=0, Sunday=6\nsampled_data['week_of_year'] = sampled_data['tweetcreatedts'].dt.isocalendar().week\nsampled_data['hour_of_day'] = sampled_data['tweetcreatedts'].dt.hour\n\n# Display the first few rows to check the features\nsampled_data[['tweetcreatedts', 'day_of_week', 'week_of_year', 'hour_of_day']].head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.487456Z","iopub.status.idle":"2024-08-26T16:09:05.487941Z","shell.execute_reply.started":"2024-08-26T16:09:05.487716Z","shell.execute_reply":"2024-08-26T16:09:05.487738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 1.1.2 Extract Sentiment-Based Features","metadata":{}},{"cell_type":"code","source":"# Extract the dominant emotion label and score from the 'emotions' column\nsampled_data['dominant_emotion'] = sampled_data['emotions'].apply(lambda x: x[0]['label'])\nsampled_data['sentiment_score'] = sampled_data['emotions'].apply(lambda x: x[0]['score'])\n\n# Display the first few rows to verify the extraction\nsampled_data[['dominant_emotion', 'sentiment_score']].head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.490025Z","iopub.status.idle":"2024-08-26T16:09:05.490536Z","shell.execute_reply.started":"2024-08-26T16:09:05.490306Z","shell.execute_reply":"2024-08-26T16:09:05.490330Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Group data by date to calculate daily sentiment averages\ndaily_sentiments = sampled_data.groupby(sampled_data['tweetcreatedts'].dt.date).agg({\n    'sentiment_score': ['mean', 'std'],  # Mean and standard deviation of sentiment\n    'dominant_emotion': lambda x: x.value_counts().index[0],  # Most common emotion of the day\n    'text': 'count'  # Number of tweets\n}).reset_index()\n\n# Rename columns for easier access\ndaily_sentiments.columns = ['date', 'avg_sentiment', 'std_sentiment', 'dominant_emotion', 'tweet_count']\n\n# Display the first few rows to check the features\ndaily_sentiments.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.492446Z","iopub.status.idle":"2024-08-26T16:09:05.492921Z","shell.execute_reply.started":"2024-08-26T16:09:05.492694Z","shell.execute_reply":"2024-08-26T16:09:05.492717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create lag features\nlags = [1, 7, 14]  # Lag of 1 day, 1 week, and 2 weeks\n\nfor lag in lags:\n    daily_sentiments[f'avg_sentiment_lag_{lag}'] = daily_sentiments['avg_sentiment'].shift(lag)\n    daily_sentiments[f'tweet_count_lag_{lag}'] = daily_sentiments['tweet_count'].shift(lag)\n\n# Drop rows with NaN values due to lag creation\ndaily_sentiments.dropna(inplace=True)\n\n# Display the first few rows to check the lag features\ndaily_sentiments.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.494690Z","iopub.status.idle":"2024-08-26T16:09:05.495199Z","shell.execute_reply.started":"2024-08-26T16:09:05.494936Z","shell.execute_reply":"2024-08-26T16:09:05.494959Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# The tweet_count is already included as part of daily_sentiments\ndaily_sentiments[['date', 'tweet_count']].head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.496911Z","iopub.status.idle":"2024-08-26T16:09:05.497404Z","shell.execute_reply.started":"2024-08-26T16:09:05.497172Z","shell.execute_reply":"2024-08-26T16:09:05.497197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(14, 7))\nplt.plot(daily_sentiments['date'], daily_sentiments['tweet_count'])\nplt.title('Tweet Volume Over Time')\nplt.xlabel('Date')\nplt.ylabel('Tweet Count')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.499348Z","iopub.status.idle":"2024-08-26T16:09:05.499937Z","shell.execute_reply.started":"2024-08-26T16:09:05.499684Z","shell.execute_reply":"2024-08-26T16:09:05.499712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.tsa.seasonal import seasonal_decompose\n\n# Decompose the time series (additive model)\ndecomposition = seasonal_decompose(daily_sentiments.set_index('date')['tweet_count'], model='additive', period=7)\ndecomposition.plot()\nplt.show()\n\n# Alternatively, use multiplicative model if data shows exponential growth\n# decomposition = seasonal_decompose(daily_sentiments.set_index('date')['tweet_count'], model='multiplicative', period=7)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.502154Z","iopub.status.idle":"2024-08-26T16:09:05.502629Z","shell.execute_reply.started":"2024-08-26T16:09:05.502406Z","shell.execute_reply":"2024-08-26T16:09:05.502428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 2: Modelling","metadata":{}},{"cell_type":"markdown","source":"### 2.1 Prophet","metadata":{}},{"cell_type":"code","source":"# Prepare the data for Prophet\nprophet_data = daily_sentiments[['date', 'tweet_count']].rename(columns={'date': 'ds', 'tweet_count': 'y'})\n\n# Display the first few rows to ensure it's formatted correctly\nprophet_data.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.504230Z","iopub.status.idle":"2024-08-26T16:09:05.504704Z","shell.execute_reply.started":"2024-08-26T16:09:05.504478Z","shell.execute_reply":"2024-08-26T16:09:05.504500Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from prophet import Prophet\n\n# Initialize the Prophet model\nmodel = Prophet()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.506439Z","iopub.status.idle":"2024-08-26T16:09:05.506932Z","shell.execute_reply.started":"2024-08-26T16:09:05.506694Z","shell.execute_reply":"2024-08-26T16:09:05.506718Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fit the model to your data\nmodel.fit(prophet_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.508533Z","iopub.status.idle":"2024-08-26T16:09:05.508988Z","shell.execute_reply.started":"2024-08-26T16:09:05.508768Z","shell.execute_reply":"2024-08-26T16:09:05.508789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a DataFrame to hold the future predictions (next 30 days)\nfuture = model.make_future_dataframe(periods=30)\n\n# Display the future dates to be predicted\nfuture.tail()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.510714Z","iopub.status.idle":"2024-08-26T16:09:05.511239Z","shell.execute_reply.started":"2024-08-26T16:09:05.510977Z","shell.execute_reply":"2024-08-26T16:09:05.511000Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make predictions\nforecast = model.predict(future)\n\n# Display the predictions\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.512951Z","iopub.status.idle":"2024-08-26T16:09:05.513452Z","shell.execute_reply.started":"2024-08-26T16:09:05.513228Z","shell.execute_reply":"2024-08-26T16:09:05.513253Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the forecast\nfig = model.plot(forecast)\nplt.title('Tweet Volume Prediction')\nplt.xlabel('Date')\nplt.ylabel('Predicted Tweet Count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.515234Z","iopub.status.idle":"2024-08-26T16:09:05.515696Z","shell.execute_reply.started":"2024-08-26T16:09:05.515477Z","shell.execute_reply":"2024-08-26T16:09:05.515499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Ensure the 'ds' column in prophet_data is in datetime format\nprophet_data['ds'] = pd.to_datetime(prophet_data['ds'])\n\n# Merge actual and predicted values\ncomparison = prophet_data.merge(forecast[['ds', 'yhat']], on='ds')\n\n# Calculate all metrics\nmae_prophet = mean_absolute_error(comparison['y'], comparison['yhat'])\nmse_prophet = mean_squared_error(comparison['y'], comparison['yhat'])\nrmse_prophet = mean_squared_error(comparison['y'], comparison['yhat'], squared=False)\nmape_prophet = np.mean(np.abs((comparison['y'] - comparison['yhat']) / comparison['y'])) * 100\nr2_prophet = r2_score(comparison['y'], comparison['yhat'])\n\n# Print the results\nprint(f'Mean Absolute Error (MAE): {mae_prophet}')\nprint(f'Mean Squared Error (MSE): {mse_prophet}')\nprint(f'Root Mean Squared Error (RMSE): {rmse_prophet}')\nprint(f'Mean Absolute Percentage Error (MAPE): {mape_prophet}%')\nprint(f'R-squared: {r2_prophet}')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.517502Z","iopub.status.idle":"2024-08-26T16:09:05.517970Z","shell.execute_reply.started":"2024-08-26T16:09:05.517749Z","shell.execute_reply":"2024-08-26T16:09:05.517771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.2 Random Forest Regression","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Step 1: Convert the 'date' column to datetime format\ndaily_sentiments['date'] = pd.to_datetime(daily_sentiments['date'])\n\n# Step 2: Create lag features\nlags = [1, 7, 14]  # Lag of 1 day, 1 week, and 2 weeks\n\nfor lag in lags:\n    daily_sentiments[f'lag_{lag}'] = daily_sentiments['tweet_count'].shift(lag)\n\n# Drop rows with NaN values due to lag creation\ndaily_sentiments.dropna(inplace=True)\n\n# Step 3: Add time-based features\ndaily_sentiments['day_of_week'] = daily_sentiments['date'].dt.dayofweek\ndaily_sentiments['week_of_year'] = daily_sentiments['date'].dt.isocalendar().week\n\n# Step 4: Define features and target\nfeatures = [f'lag_{lag}' for lag in lags] + ['day_of_week', 'week_of_year']\nX = daily_sentiments[features]\ny = daily_sentiments['tweet_count']\n\n# Step 5: Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Display the first few rows of the training data\nX_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.520774Z","iopub.status.idle":"2024-08-26T16:09:05.521350Z","shell.execute_reply.started":"2024-08-26T16:09:05.521081Z","shell.execute_reply":"2024-08-26T16:09:05.521121Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Step 6: Initialize and train the Random Forest model\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.523975Z","iopub.status.idle":"2024-08-26T16:09:05.524543Z","shell.execute_reply.started":"2024-08-26T16:09:05.524299Z","shell.execute_reply":"2024-08-26T16:09:05.524325Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict on the test set\ny_pred = rf_model.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.527516Z","iopub.status.idle":"2024-08-26T16:09:05.528316Z","shell.execute_reply.started":"2024-08-26T16:09:05.527954Z","shell.execute_reply":"2024-08-26T16:09:05.527990Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate evaluation metrics\nmae_rf = mean_absolute_error(y_test, y_pred)\nmse_rf = mean_squared_error(y_test, y_pred)\nrmse_rf = mean_squared_error(y_test, y_pred, squared=False)\nmape_rf = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\nr2_rf = r2_score(y_test, y_pred)\n\n# Print the results\nprint(f'Random Forest - Mean Absolute Error (MAE): {mae_rf}')\nprint(f'Random Forest - Mean Squared Error (MSE): {mse_rf}')\nprint(f'Random Forest - Root Mean Squared Error (RMSE): {rmse_rf}')\nprint(f'Random Forest - Mean Absolute Percentage Error (MAPE): {mape_rf}%')\nprint(f'Random Forest - R-squared: {r2_rf}')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.530344Z","iopub.status.idle":"2024-08-26T16:09:05.531047Z","shell.execute_reply.started":"2024-08-26T16:09:05.530668Z","shell.execute_reply":"2024-08-26T16:09:05.530702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a DataFrame to compare actual and predicted values\nperformance_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index=X_test.index)\n\n# Sort the DataFrame by index (which is the date in this case)\nperformance_df = performance_df.sort_index()\n\n# Plot the actual vs predicted values\nplt.figure(figsize=(14, 7))\nplt.plot(performance_df.index, performance_df['Actual'], label='Actual', color='blue', marker='o')\nplt.plot(performance_df.index, performance_df['Predicted'], label='Predicted', color='red', marker='x')\nplt.title('Random Forest - Actual vs Predicted Tweet Counts')\nplt.xlabel('Date')\nplt.ylabel('Tweet Count')\nplt.legend()\nplt.grid(True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.533554Z","iopub.status.idle":"2024-08-26T16:09:05.534255Z","shell.execute_reply.started":"2024-08-26T16:09:05.533897Z","shell.execute_reply":"2024-08-26T16:09:05.533931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Get feature importances\nimportances = rf_model.feature_importances_\nindices = np.argsort(importances)[::-1]\n\n# Plot feature importances\nplt.figure(figsize=(10, 6))\nplt.title(\"Feature Importances - Random Forest\")\nplt.bar(range(X_train.shape[1]), importances[indices], align=\"center\")\nplt.xticks(range(X_train.shape[1]), [features[i] for i in indices], rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.536234Z","iopub.status.idle":"2024-08-26T16:09:05.536867Z","shell.execute_reply.started":"2024-08-26T16:09:05.536541Z","shell.execute_reply":"2024-08-26T16:09:05.536572Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Ensure the 'date' column is in datetime format\ndaily_sentiments['date'] = pd.to_datetime(daily_sentiments['date'])\n\n# Create lag features\nlags = [1, 7, 14]  # Lag of 1 day, 1 week, and 2 weeks\n\nfor lag in lags:\n    daily_sentiments[f'lag_{lag}'] = daily_sentiments['tweet_count'].shift(lag)\n\n# Drop rows with NaN values due to lag creation\ndaily_sentiments.dropna(inplace=True)\n\n# Add time-based features\ndaily_sentiments['day_of_week'] = daily_sentiments['date'].dt.dayofweek\ndaily_sentiments['week_of_year'] = daily_sentiments['date'].dt.isocalendar().week\n\n# Add sentiment-based features\ndaily_sentiments['avg_sentiment'] = daily_sentiments['avg_sentiment']\n\n# Add interaction terms between existing features\ndaily_sentiments['lag_1_sentiment'] = daily_sentiments['lag_1'] * daily_sentiments['avg_sentiment']\ndaily_sentiments['lag_7_sentiment'] = daily_sentiments['lag_7'] * daily_sentiments['avg_sentiment']\ndaily_sentiments['lag_14_sentiment'] = daily_sentiments['lag_14'] * daily_sentiments['avg_sentiment']\n\n# Define the updated features and target\nfeatures = [f'lag_{lag}' for lag in lags] + ['day_of_week', 'week_of_year', 'avg_sentiment',\n                                             'lag_1_sentiment', 'lag_7_sentiment', 'lag_14_sentiment']\nX = daily_sentiments[features]\ny = daily_sentiments['tweet_count']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train the model with the updated features\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.538874Z","iopub.status.idle":"2024-08-26T16:09:05.539579Z","shell.execute_reply.started":"2024-08-26T16:09:05.539269Z","shell.execute_reply":"2024-08-26T16:09:05.539301Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict on the test set\ny_pred = rf_model.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.541910Z","iopub.status.idle":"2024-08-26T16:09:05.542544Z","shell.execute_reply.started":"2024-08-26T16:09:05.542230Z","shell.execute_reply":"2024-08-26T16:09:05.542263Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate evaluation metrics\nmae_rf = mean_absolute_error(y_test, y_pred)\nmse_rf = mean_squared_error(y_test, y_pred)\nrmse_rf = mean_squared_error(y_test, y_pred, squared=False)\nmape_rf = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\nr2_rf = r2_score(y_test, y_pred)\n\n# Print the results\nprint(f'Enhanced Random Forest - Mean Absolute Error (MAE): {mae_rf}')\nprint(f'Enhanced Random Forest - Mean Squared Error (MSE): {mse_rf}')\nprint(f'Enhanced Random Forest - Root Mean Squared Error (RMSE): {rmse_rf}')\nprint(f'Enhanced Random Forest - Mean Absolute Percentage Error (MAPE): {mape_rf}%')\nprint(f'Enhanced Random Forest - R-squared: {r2_rf}')\n\n# Visualize the model performance\nperformance_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index=X_test.index)\nperformance_df = performance_df.sort_index()\n\nplt.figure(figsize=(14, 7))\nplt.plot(performance_df.index, performance_df['Actual'], label='Actual', color='blue', marker='o')\nplt.plot(performance_df.index, performance_df['Predicted'], label='Predicted', color='red', marker='x')\nplt.title('Enhanced Random Forest - Actual vs Predicted Tweet Counts')\nplt.xlabel('Date')\nplt.ylabel('Tweet Count')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.545083Z","iopub.status.idle":"2024-08-26T16:09:05.545711Z","shell.execute_reply.started":"2024-08-26T16:09:05.545390Z","shell.execute_reply":"2024-08-26T16:09:05.545423Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.3 Gradient Boosting (XGBoost)","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\n# Define features and target using the enhanced features\nfeatures = [f'lag_{lag}' for lag in lags] + ['day_of_week', 'week_of_year', 'avg_sentiment',\n                                             'lag_1_sentiment', 'lag_7_sentiment', 'lag_14_sentiment']\nX = daily_sentiments[features]\ny = daily_sentiments['tweet_count']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.547700Z","iopub.status.idle":"2024-08-26T16:09:05.548348Z","shell.execute_reply.started":"2024-08-26T16:09:05.548013Z","shell.execute_reply":"2024-08-26T16:09:05.548043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the XGBoost model\nxgb_model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)\n\n# Train the model\nxgb_model.fit(X_train, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.550698Z","iopub.status.idle":"2024-08-26T16:09:05.551357Z","shell.execute_reply.started":"2024-08-26T16:09:05.551007Z","shell.execute_reply":"2024-08-26T16:09:05.551038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict on the test set\ny_pred = xgb_model.predict(X_test)\n\n# Calculate evaluation metrics\nmae_xgb = mean_absolute_error(y_test, y_pred)\nmse_xgb = mean_squared_error(y_test, y_pred)\nrmse_xgb = mean_squared_error(y_test, y_pred, squared=False)\nmape_xgb = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\nr2_xgb = r2_score(y_test, y_pred)\n\n# Print the results\nprint(f'XGBoost - Mean Absolute Error (MAE): {mae_xgb}')\nprint(f'XGBoost - Mean Squared Error (MSE): {mse_xgb}')\nprint(f'XGBoost - Root Mean Squared Error (RMSE): {rmse_xgb}')\nprint(f'XGBoost - Mean Absolute Percentage Error (MAPE): {mape_xgb}%')\nprint(f'XGBoost - R-squared: {r2_xgb}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.554260Z","iopub.status.idle":"2024-08-26T16:09:05.554773Z","shell.execute_reply.started":"2024-08-26T16:09:05.554527Z","shell.execute_reply":"2024-08-26T16:09:05.554550Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create a DataFrame to compare actual and predicted values\nperformance_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred}, index=X_test.index)\n\n# Sort the DataFrame by index (which is the date in this case)\nperformance_df = performance_df.sort_index()\n\n# Plot the actual vs predicted values\nplt.figure(figsize=(14, 7))\nplt.plot(performance_df.index, performance_df['Actual'], label='Actual', color='blue', marker='o')\nplt.plot(performance_df.index, performance_df['Predicted'], label='Predicted', color='red', marker='x')\nplt.title('XGBoost - Actual vs Predicted Tweet Counts')\nplt.xlabel('Date')\nplt.ylabel('Tweet Count')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.557224Z","iopub.status.idle":"2024-08-26T16:09:05.557753Z","shell.execute_reply.started":"2024-08-26T16:09:05.557502Z","shell.execute_reply":"2024-08-26T16:09:05.557527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.4 LSTM","metadata":{}},{"cell_type":"code","source":"# Select the features and target\nfeatures = [f'lag_{lag}' for lag in lags] + ['day_of_week', 'week_of_year', 'avg_sentiment',\n                                             'lag_1_sentiment', 'lag_7_sentiment', 'lag_14_sentiment']\nX = daily_sentiments[features].values\ny = daily_sentiments['tweet_count'].values\n\n# Scale the features and the target\nscaler_X = MinMaxScaler(feature_range=(0, 1))\nscaler_y = MinMaxScaler(feature_range=(0, 1))\n\nX_scaled = scaler_X.fit_transform(X)\ny_scaled = scaler_y.fit_transform(y.reshape(-1, 1))\n\n# Reshape the data for LSTM\nX_lstm = np.reshape(X_scaled, (X_scaled.shape[0], 1, X_scaled.shape[1]))\n\n# Split the data into training and testing sets\nsplit_ratio = 0.8\ntrain_size = int(len(X_lstm) * split_ratio)\nX_train, X_test = X_lstm[:train_size], X_lstm[train_size:]\ny_train, y_test = y_scaled[:train_size], y_scaled[train_size:]\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.560267Z","iopub.status.idle":"2024-08-26T16:09:05.560796Z","shell.execute_reply.started":"2024-08-26T16:09:05.560538Z","shell.execute_reply":"2024-08-26T16:09:05.560564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Initialize the LSTM model\nmodel = Sequential()\n\n# Increase the number of LSTM units\nmodel.add(LSTM(units=100, return_sequences=False, input_shape=(X_train.shape[1], X_train.shape[2])))\n\n# Add an output layer\nmodel.add(Dense(1))\n\n# Compile the model with a different optimizer\nmodel.compile(optimizer='rmsprop', loss='mean_squared_error')\n\n# Train the model with more epochs\nmodel.fit(X_train, y_train, epochs=50, batch_size=16)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.562370Z","iopub.status.idle":"2024-08-26T16:09:05.562832Z","shell.execute_reply.started":"2024-08-26T16:09:05.562605Z","shell.execute_reply":"2024-08-26T16:09:05.562627Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train the LSTM model\nmodel.fit(X_train, y_train, epochs=20, batch_size=32)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.565238Z","iopub.status.idle":"2024-08-26T16:09:05.565728Z","shell.execute_reply.started":"2024-08-26T16:09:05.565494Z","shell.execute_reply":"2024-08-26T16:09:05.565518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Predict on the test set\ny_pred = model.predict(X_test)\n\n# Rescale the predictions back to the original scale\ny_pred_rescaled = scaler_y.inverse_transform(y_pred)\n\n# Evaluate the model with rescaled predictions\nmae_lstm = mean_absolute_error(scaler_y.inverse_transform(y_test), y_pred_rescaled)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.567488Z","iopub.status.idle":"2024-08-26T16:09:05.568003Z","shell.execute_reply.started":"2024-08-26T16:09:05.567759Z","shell.execute_reply":"2024-08-26T16:09:05.567783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate evaluation metrics\nmae_lstm = mean_absolute_error(y_test, y_pred)\nmse_lstm = mean_squared_error(y_test, y_pred)\nrmse_lstm = mean_squared_error(y_test, y_pred, squared=False)\nmape_lstm = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\nr2_lstm = r2_score(y_test, y_pred)\n\n# Print the results\nprint(f'LSTM - Mean Absolute Error (MAE): {mae_lstm}')\nprint(f'LSTM - Mean Squared Error (MSE): {mse_lstm}')\nprint(f'LSTM - Root Mean Squared Error (RMSE): {rmse_lstm}')\nprint(f'LSTM - Mean Absolute Percentage Error (MAPE): {mape_lstm}%')\nprint(f'LSTM - R-squared: {r2_lstm}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.569390Z","iopub.status.idle":"2024-08-26T16:09:05.569872Z","shell.execute_reply.started":"2024-08-26T16:09:05.569639Z","shell.execute_reply":"2024-08-26T16:09:05.569668Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot the actual vs predicted values\nplt.figure(figsize=(14, 7))\nplt.plot(y_test, label='Actual', color='blue', marker='o')\nplt.plot(y_pred, label='Predicted', color='red', marker='x')\nplt.title('LSTM - Actual vs Predicted Tweet Counts')\nplt.xlabel('Sample Index')\nplt.ylabel('Tweet Count')\nplt.legend()\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.573138Z","iopub.status.idle":"2024-08-26T16:09:05.573927Z","shell.execute_reply.started":"2024-08-26T16:09:05.573476Z","shell.execute_reply":"2024-08-26T16:09:05.573509Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2.5 SARIMA","metadata":{}},{"cell_type":"code","source":"# Ensure 'daily_sentiments' has a proper DatetimeIndex with frequency set\ndaily_sentiments['date'] = pd.to_datetime(daily_sentiments['date'])\ndaily_sentiments.set_index('date', inplace=True)\ndaily_sentiments = daily_sentiments.asfreq('D')  # Set frequency to daily\n\n# Multiplicative Decomposition with period=7 (assuming weekly seasonality)\nmultiplicative_decomposition = seasonal_decompose(daily_sentiments['tweet_count'], model='multiplicative', period=7)\n\n# Additive Decomposition with period=7\nadditive_decomposition = seasonal_decompose(daily_sentiments['tweet_count'], model='additive', period=7)\n\nadditive_decomposition.plot()\nplt.show()\n\nmultiplicative_decomposition.plot()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.575712Z","iopub.status.idle":"2024-08-26T16:09:05.576407Z","shell.execute_reply.started":"2024-08-26T16:09:05.576042Z","shell.execute_reply":"2024-08-26T16:09:05.576094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n# Perform the Dickey-Fuller test on the 'tweet_count' time series\nresult = adfuller(daily_sentiments['tweet_count'].dropna())\n\n# Extract and display the test results\nprint('ADF Statistic:', result[0])\nprint('p-value:', result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n    print(f'   {key}: {value}')\n\n# Interpretation\nif result[1] > 0.05:\n    print(\"The series is likely non-stationary. Differencing is recommended.\")\nelse:\n    print(\"The series is likely stationary. No differencing is needed.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.578713Z","iopub.status.idle":"2024-08-26T16:09:05.579234Z","shell.execute_reply.started":"2024-08-26T16:09:05.578980Z","shell.execute_reply":"2024-08-26T16:09:05.579005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Determine the maximum number of lags (less than half of the data size)\nmax_lags = min(15, len(daily_sentiments['tweet_count']) // 2)\n\n# Plot ACF\nplt.figure(figsize=(10, 5))\nplot_acf(daily_sentiments['tweet_count'], lags=max_lags, ax=plt.gca())\nplt.title('Autocorrelation Function (ACF)')\nplt.show()\n\n# Plot PACF\nplt.figure(figsize=(10, 5))\nplot_pacf(daily_sentiments['tweet_count'], lags=max_lags, ax=plt.gca())\nplt.title('Partial Autocorrelation Function (PACF)')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.581235Z","iopub.status.idle":"2024-08-26T16:09:05.581724Z","shell.execute_reply.started":"2024-08-26T16:09:05.581483Z","shell.execute_reply":"2024-08-26T16:09:05.581505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_size = int(len(daily_sentiments) * 0.8)\ntrain, test = daily_sentiments['tweet_count'][:train_size], daily_sentiments['tweet_count'][train_size:]","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.583516Z","iopub.status.idle":"2024-08-26T16:09:05.584017Z","shell.execute_reply.started":"2024-08-26T16:09:05.583777Z","shell.execute_reply":"2024-08-26T16:09:05.583801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fit the SARIMA model on the training data\nmodsar = SARIMAX(train, order=(1, 0, 1), seasonal_order=(1, 1, 1, 7))\nmodsar_fit = modsar.fit()\nprint(modsar_fit.summary())","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.586296Z","iopub.status.idle":"2024-08-26T16:09:05.586766Z","shell.execute_reply.started":"2024-08-26T16:09:05.586530Z","shell.execute_reply":"2024-08-26T16:09:05.586551Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plot residual errors\nresiduals_sar = pd.DataFrame(modsar_fit.resid)\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\nresiduals_sar.plot(title=\"Residuals\", ax=ax[0])\nresiduals_sar.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.588856Z","iopub.status.idle":"2024-08-26T16:09:05.589342Z","shell.execute_reply.started":"2024-08-26T16:09:05.589116Z","shell.execute_reply":"2024-08-26T16:09:05.589140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Diagnostics plots for the SARIMA model\nmodsar_fit.plot_diagnostics(figsize=(10, 8))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.590678Z","iopub.status.idle":"2024-08-26T16:09:05.591141Z","shell.execute_reply.started":"2024-08-26T16:09:05.590899Z","shell.execute_reply":"2024-08-26T16:09:05.590920Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Forecast on the test set\nnum_obs_ahead = len(test)\nfc_sar = modsar_fit.forecast(num_obs_ahead, alpha=0.05)  # 95% confidence interval\nconf_ins = modsar_fit.get_forecast(num_obs_ahead).summary_frame()","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.593016Z","iopub.status.idle":"2024-08-26T16:09:05.593501Z","shell.execute_reply.started":"2024-08-26T16:09:05.593286Z","shell.execute_reply":"2024-08-26T16:09:05.593309Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert forecasts to pandas series\nfc_series = pd.Series(fc_sar, index=test.index)\nlower_series = pd.Series(conf_ins['mean_ci_lower'], index=test.index)\nupper_series = pd.Series(conf_ins['mean_ci_upper'], index=test.index)\n\n# Plot the results\nplt.figure(figsize=(12, 5), dpi=100)\nplt.grid()\nplt.plot(train, label='Training Data')\nplt.plot(test, label='Actual Data')\nplt.plot(fc_series, label='Forecast')\nplt.fill_between(lower_series.index, lower_series, upper_series, \n                 color='k', alpha=.15)\nplt.title('Forecast vs Actuals for SARIMA')\nplt.legend(loc='upper left', fontsize=8)\nplt.show()\n\n# Evaluate the model\nmse = mean_squared_error(test, fc_series)\nmae = mean_absolute_error(test, fc_series)\nprint(f'Mean Squared Error (MSE): {mse:.2f}')\nprint(f'Mean Absolute Error (MAE): {mae:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.595157Z","iopub.status.idle":"2024-08-26T16:09:05.595883Z","shell.execute_reply.started":"2024-08-26T16:09:05.595380Z","shell.execute_reply":"2024-08-26T16:09:05.595401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Forecast on the test set\nnum_obs_ahead = len(test)\nforecast_result = modsar_fit.get_forecast(steps=num_obs_ahead)\n\n# Extract the predicted mean from the forecast object\nfc_series = forecast_result.predicted_mean\n\n# Calculate evaluation metrics\nmae_sarima = mean_absolute_error(test, fc_series)\nmse_sarima = mean_squared_error(test, fc_series)\nrmse_sarima = np.sqrt(mse)\nmape_sarima = np.mean(np.abs(fc_series - test) / np.abs(test)) * 100\nr_squared_sarima = r2_score(test, fc_series)\n\n# Print the results\nprint(f'SARIMA - Mean Absolute Error (MAE): {mae_sarima:.6f}')\nprint(f'SARIMA - Mean Squared Error (MSE): {mse_sarima:.6f}')\nprint(f'SARIMA - Root Mean Squared Error (RMSE): {rmse_sarima:.6f}')\nprint(f'SARIMA - Mean Absolute Percentage Error (MAPE): {mape_sarima:.2f}%')\nprint(f'SARIMA - R-squared: {r_squared_sarima:.6f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.598042Z","iopub.status.idle":"2024-08-26T16:09:05.598564Z","shell.execute_reply.started":"2024-08-26T16:09:05.598329Z","shell.execute_reply":"2024-08-26T16:09:05.598353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Step 3: Model Comparison","metadata":{}},{"cell_type":"code","source":"# Store the metrics for each model in a dictionary\nmetrics = {\n    'Model': ['Prophet', 'Random Forest', 'XGBoost', 'LSTM', 'SARIMA'],\n    'MAE': [mae_prophet, mae_rf, mae_xgb, mae_lstm, mae_sarima],\n    'MSE': [mse_prophet, mse_rf, mse_xgb, mse_lstm, mse_sarima],\n    'RMSE': [rmse_prophet, rmse_rf, rmse_xgb, rmse_lstm, rmse_sarima],\n    'MAPE': [mape_prophet, mape_rf, mape_xgb, mape_lstm, mape_sarima],\n    'R-squared': [r2_prophet, r2_rf, r2_xgb, r2_lstm, r_squared_sarima]\n}\n\n# Convert to DataFrame for better visualization\nmetrics_df = pd.DataFrame(metrics)\n\n# Display the metrics comparison\nmetrics_df","metadata":{"execution":{"iopub.status.busy":"2024-08-26T16:09:05.600473Z","iopub.status.idle":"2024-08-26T16:09:05.600930Z","shell.execute_reply.started":"2024-08-26T16:09:05.600708Z","shell.execute_reply":"2024-08-26T16:09:05.600730Z"},"trusted":true},"execution_count":null,"outputs":[]}]}